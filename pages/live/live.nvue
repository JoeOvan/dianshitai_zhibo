<template>
	<view class="wrapper">
		<view class="nav-fixed isfixed">
			<cu-custom bgColor="text-white" :isBack="true" toUrl="/pages/live/live">
				<block slot="backText"><text class="logo-tips">直播</text></block>
			</cu-custom>
		</view>
		<view class="content" :style="{'top':tabFix}">
			<view class="swiper-item">
				<view class="swiper-item-author">
					<image :src="baseUrl+content.anchor.headerImg" mode="aspectFill"></image>
					<text>{{content.anchor.name}}</text>
					<text style="font-size: 8px;">{{seeNum}}看过</text>
				</view>
				
				<!-- 直播播放模块 -->
				<view  @click="handleClicked">
					<video class="video" :id="'myVideo'" :ref="'myVideo'"  title="产品直播" :style="{'height':wHeight+'px'}" 
						:src="content.liveUrl" 
						:controls="true" :show-center-play-btn="true" :autoplay="true" :loop="true" :show-play-btn="true" objectFit="cover"
						:show-fullscreen-btn="true" @error="videoErrorCallback">
					</video>
					
					 <!-- 中间播放按钮 -->
					<view class="vd-cover"> 
						<image v-if="!isPlay" src="../../static/play.png" mode="aspectFill"  @click="handleClicked"></image>
					</view>
				</view>
				
				<!-- 用户弹幕模块 -->
				<view class="audio">
					<view class="comment-list">
						<scroll-view id="scrollview" class="comment-content" scroll-y="true"  :scroll-into-view="scrollInto" style="height: 150px;overflow:hidden" :scroll-with-animation="true" :scroll-top="scrollTop">
							<view class="comment-text m-item" :id="'s'+item.id" v-for="(item, index) in comment" :key="index">
								<text>{{item.userName}}：</text>{{item.contentText}}
							</view>
						</scroll-view>
					</view>
				</view>
				
				<!-- 带货最新商品显示 -->
				<view class="animation"  :class="[isGoods==true ? 'goods-animation' : 'goods-animation-out']">
					<view class="cart" @click="setCart">
						<view class="cart-img">
							<image :src="baseUrl+liveGoods.thumbImgUrl" mode="aspectFill"></image>
						</view>
						<view class="cart-title">
							<view class="cart-goods">{{liveGoods.name}}</view>
							<text class="cart-price">￥{{liveGoods.minPrice}}</text>
						</view>
						<view class="cart-icon">
							<image src="../../static/Shopping-cart.png" mode=""></image>
						</view>
					</view>
				</view>
				
				<!-- 底部功能 -->
				<view class="info">
					<view class="info-gift" @click="getGoods"><image src="../../static/cart.png"></image></view>
					<view class="info-chat" :style="{'width':wChat+'%'}">
						<input data-target="DialogModal" type="text" v-model.trim="msg" @confirm="clickRequest" placeholder="跟主播聊聊" placeholder-style="color:#fff" cursor-spacing="20" />
					</view>
					
					<block v-if="!msg.length">						
						<view class="info-share">
							<image src="../../static/Share.png" class="share"></image>
							<button open-type="share"></button>
						</view>
						
						<!-- 用户点赞功能 -->
						<view class="info-love" @click="setLike">
							<text>{{likeNum}}</text>
							<image src="../../static/like-btn.png"></image>
							<button type="default"  @click="thumbsUp"></button>
							<view class="love-content" style="position: absolute;">
								<canvas canvas-id="thumsCanvas" id="thumsCanvas" style="width:200rpx;height:600rpx;"></canvas>
							</view>
						</view>
					</block>
					
					<block v-else>
						<view class="btn-send" @click="clickRequest">发送</view>
					</block>
					
				</view>
			</view>
		</view>
		
		<!-- 商品规格弹框 -->
		<sku :open="openModal" :goodsId="goodsId" :isLive="isLive" :liveRoomId="liveRoomId" :anchorId="anchorId" @state='state'></sku>
		
		<sku :open="openSkuModal" :goodsId="goodsId" @state='closeSkuModal' :isLive="isLive" :liveRoomId="liveRoomId" :anchorId="anchorId" style="z-index: 999;height: 0;"></sku>
		
		<!-- 带货商品列表弹框 -->
		<model :shareState="openGoodsModal" @state="goodsState" style="position: absolute;bottom: 0;">
			<block slot="content">
				<scroll-view class="goods-list" scroll-y="true">
					<view class="goods-info" v-for="(item,index) in content.report.goodsList"  :key="index">
						<view class="goods-img" @click="toGoodsInfo(item.tbGoods.goodsId)">
							<image :src="baseUrl+item.tbGoods.thumbImgUrl" mode="aspectFill"></image>
						</view>
						<view class="goods-title">
							<view class="goods-text" @click="toGoodsInfo(item.tbGoods.goodsId)">
								{{item.tbGoods.name}}
							</view>
							<view class="goods-bottom">
								<view class="goods-price" @click="toGoodsInfo(item.tbGoods.goodsId)">
									￥{{item.tbGoods.minPrice}}
								</view>
								<view class="goods-cart" @click="getGoodsById(item.goodsId,item.tbGoods.multity)">
									<image src="../../static/Shopping-cart.png" ></image>
								</view>
							</view>
						</view>
					</view>
				</scroll-view>
			</block>
		</model>
		
		<login-modal :isShow='isLoginModalShow' @openModal="isLoginModalShow = true" @closeModal="isLoginModalShow = false"></login-modal>
		
	</view>
</template>

<script>
	import dtVideo from "@/components/dt-video/dt-video"
	import model from '@/components/model.vue'
	import sku from '@/components/sku.vue'
	import { mapState, mapMutations } from 'vuex'
	let timer = null
	export default {
		computed: {
			...mapState('m_user', ['userinfo','shareCode']),
		},
		components:{dtVideo,model,sku},
		data() {
			return {
				isLive:true,
				thumbsUpContext: null,
				thumbsUpTimer: 0,
				thumbsUpQueue: {},
				thumbsUpWidth: 100,
				thumbsUpHeight: 300,
				animationData: {},
				scrollInto:"",
				tabFix: this.CustomBar + 'px',
				current: 0,
				clickNum: 0,
				indicatorDots: true,
				openModal: false,
				openGoodsModal: false,
				openSkuModal: false,
				isGoods: false,
				isPlay: true,
				autoplay: true,
				interval: 2000,
				duration: 500,
				msg:"",
				wHeight:0,
				wChat:60,
				scrollTop:0,
				socketTask: null,
				token:this.$store.state.m_user.token || '',
				// 确保websocket是打开状态
				is_open_socket: false,
				
				is_like: false,
				style: {
					pageHeight: 0,
					contentViewHeight: 0,
					footViewHeight: 90,
					mitemHeight: 0
				},
				comment:[{
					id:1,
					userName:"管理员",
					contentText:"欢迎来到直播间！直播间内严禁出现违规、低俗色情、吸烟酗酒等内容。"
				}],
				seeNum:0,
				likeNum:0,
				id:0,
				reportId:0,
				goodsId:"",
				liveGoods:{
					liveGoodsId:0,
					minPrice:"0.00",
					name:"",
					thumbImgUrl:"",
					multity:0,
				},
				content:{
					liveId:0,
					introduce:"",
					anchor:{
						headerImg:"",
						name:"",
					},
					report:{
						commentList:[],
						goodsList:[],
						commentListNum:0,
						title:"",
						content:"",
						replayVideoUrl:"",
					},
					liveImgUrl:"",
					liveUrl:"",
					type:2,
					videoUrl: '',
					videoNetUrl: ''
				},
				toPageClose:true,
				baseUrl: uni.$url.baseUrl,
				interval:null,
				timeOut:30000,
				timeoutRestartObj:null,
				reconnectTimeOutObj:null,
				lockReconnect:false, //避免重复连接
				socketNum:0 ,//Socket连接次数
				virtualLookNum: 0, //虚拟观看数
				liveRoomId: 0, //直播间ID
				anchorId: 0,	//主播ID
				isLoginModalShow: false, //登录模态框是否展示
			}
		},
		async onShow() {
			
			this.onCheckLogin();
			
			clearTimeout(this.interval);
			this.interval = null;
			// 进入这个页面的时候创建websocket连接【整个页面随时使用】
			this.connectSocketInit();
			this.toPageClose=true;
		},
		onLoad(options) {
			
			let _this = this;
			this.animation = uni.createAnimation();
			this.running();
			uni.getSystemInfo({
			    success: function (res) {
					if(res.windowWidth<330){
						_this.wChat = 53;
					}
			       _this.wHeight = res.windowHeight - _this.CustomBar;
			    }
			});
			this.setScroll(13);
			this.id=options.id;
			this.likeNum=options.likeNum;
			this.seeNum=options.seeNum;
			this.getData();
		},
		onReady() {
			this.thumbsUpContext = uni.createCanvasContext('thumsCanvas');
		}, 
		onUnload() {
			this.animationData = {}
			if(this.interval) {
				clearTimeout(this.interval);  
				this.interval = null;  
			}
			if(this.is_open_socket) {				
				this.closeSocket();
				this.is_open_socket = false;
			}
		},
		// 发送给朋友
		onShareAppMessage(res) {
			
			this.$wxShare.mpShare['title'] = this.content.anchor.name || '龙眼直播';
			
			return this.$wxShare.mpShare
			
		},
		//分享到朋友圈
		onShareTimeline(res) {
			
			this.$wxShare.mpShare['title'] = this.content.anchor.name || '龙眼直播';
			
			return this.$wxShare.mpShare
		},
		methods: {
			...mapMutations('m_user', ['updateUserInfo', 'updateToken', 'updateShareCode']),
			showModal(e) {
				this.modalName = e.currentTarget.dataset.target
			},
			hideModal(e) {
				this.modalName = null
			},
			async onCheckLogin(e) {
				
				let code = await this.getAuthToken();
				
				if(code !== 401) return;
			
				// if(this.token) return;
				this.updateUserInfo({})
				this.updateToken('')
				
				this.isLoginModalShow = true;
				// this.$emit("openModal");
				
			},
			async getAuthToken() {
				let token = this.$store.state.m_user.token;
				if (!token || token == '') {					
					
					this.isLoginModalShow = true;
					
					return 0;
				} else {
					
					const res = await uni.$http.get(uni.$url.authToken);
					
					return res.data.code;
					
				}
				
			},
			//点赞
			async setLike(){	
				
				if (this.is_open_socket) {
					let token = this.$store.state.m_user.token;
					// websocket的服务器的原理是:发送一次消息,同时返回一组数据【否则服务器会进去死循环崩溃】
					let query = {
						sendType: 5,
						token
					}
					this.socketTask.send({
						data: JSON.stringify(query),
						async success() {
							console.log("消息发送成功");
						},
					});
				}

			},
			//获取直播间数据
			async getData(){
				let that=this;
				// 发起请求
				const res = await uni.$http.get(uni.$url.getLiveRoomById,{roomId:this.id});
							
				if (res.data.code !== 0) return uni.$showMsg(res.data.msg);
				
				this.content.introduce = res.data.data.introduce;
				this.content.status = res.data.data.status;
				this.content.videoUrl = res.data.data.live.videoNetUrl || this.baseUrl + res.data.data.live.videoUrl;

				this.content.liveUrl = this.content.status == 1 ? res.data.data.liveUrl : this.content.videoUrl;
				
				this.content.anchor.headerImg = res.data.data.anchor.headerImg;
				this.content.anchor.name = res.data.data.anchor.name;
				this.content.report.goodsList = res.data.data.live.liveGoodsList;
				this.content.report.title = res.data.data.live.title;
				this.content.report.liveId = res.data.data.liveId;
				this.is_like = res.data.data.isLike;
				this.liveRoomId = res.data.data.roomId;
				this.anchorId = res.data.data.anchorId;
				this.seeNum = res.data.data.comeNum;
				
				let liveData = {
					id:2,
					userName:this.content.anchor.name,
					contentText:res.data.data.live.introduce
				}
				this.comment.push(liveData)
			},
			//获取直播间任务商品数据
			async getLiveGoodsData(){
				let that = this;
				// 发起请求
				const res = await uni.$http.get(uni.$url.getRecommendGoodsById,{liveId:this.content.report.liveId});
							
				if (res.data.code !== 0) return uni.$showMsg(res.data.msg);
				
				if(!res.data.data.goodsId || res.data.data.goodsId == null) return; 
				
				this.liveGoods.liveGoodsId = res.data.data.goodsId
				this.liveGoods.minPrice = res.data.data.minPrice
				this.liveGoods.multity = res.data.data.multity
				this.liveGoods.name = res.data.data.name
				this.liveGoods.thumbImgUrl = res.data.data.thumbImgUrl
				this.isGoods = true;
				
				setTimeout(function(){
					that.isGoods=false;
				},5000)
			},
			//提交订单
			async toOrderSnu(){
				let query = {
					goodsId:this.goodsId,
					number:1,
					orderSourceType: 1,
					liveRoomId: this.liveRoomId,
					anchorId: this.anchorId
				}
				const res = await uni.$http.post(uni.$url.transFormOrder,query);
				
				if (res.data.code !== 0) return uni.$showMsg(res.data.msg);
				
				uni.navigateTo({
				  url: '../order/liveOrder-submit?type=1&goodsId='+this.goodsId+'&skuId=0&number=1'
				})
			},
			//获取商品规格，如果没有则下单
			getGoodsById(id,multity){
				this.goodsId=id;
				if(multity==1){
					this.openSkuModal=true;
				}else{
					this.toOrderSnu();
				}
			},
			getGoods(){
				this.openGoodsModal=true;
			},
			goodsState(e){
				this.openGoodsModal=e;
			},
			state(e){
				this.openModal=e;
			},
			//关闭直播商品规格
			closeSkuModal(e){
				this.openSkuModal=e;
			},
			//打开直播商品规格
			setCart(){
				// this.openModal=true;
				this.toGoodsInfo(this.liveGoods.liveGoodsId);
			},
			
			// 进入这个页面的时候创建websocket连接【整个页面随时使用】
			connectSocketInit() {
				let that = this;
				// 创建一个this.socketTask对象【发送、接收、关闭socket都由这个对象操作】
				this.socketTask = uni.connectSocket({
					// url: "ws://adv.winzkj.com/imserver/"+that.token+"/"+that.id,
					url: "ws://adv.winzkj.com/imserver/"+that.id,
					success(data) {
						console.log("websocket连接成功");
					},
					fail(res) {
						console.log({res});
					}
				});

 
				// 消息的发送和接收必须在正常连接打开中,才能发送或接收【否则会失败】
				this.socketTask.onOpen((res) => {
					console.log("WebSocket连接正常打开中...！");
					this.is_open_socket = true;
					
					//监听视频直播任务
					this.interval = setInterval(function(){
						that.getLiveGoodsData();
					},10000)
					
					// 注：只有连接正常打开中 ，才能正常收到消息
					this.socketTask.onMessage((res) => {
						console.log("websocket正常打开中");

						//重连成功后清除定时任务
						clearTimeout(this.reconnectTimeOutObj);
						this.socketNum=0;
						
						if(res.data!="连接成功"){
							let resData = JSON.parse(res.data)
							
							console.log(res);
							
							if(resData.sendType==1){
								let data = {
									id:this.comment.length+1,
									userName:resData.data.userName,
									contentText:resData.data.contentText
								}
								this.comment.push(data)
								
								this.msg='';
								this.setScroll(this.comment.length);
							}
							
							
							if(resData.sendType == 5) {
								
								this.likeNum = resData.data;
								//开启点赞动画
								this.thumbsUp();
								
							}
							
							
							if(resData.sendType == 6) {
								
								this.seeNum = resData.data;
								
							}
							
							
							//开播了 刷新页面
							if(resData.sendType == 7) {
								
								this.pageReLoad(1);
								
							}
							
							
							//下播了 刷新页面
							if(resData.sendType == 8) {
								
								this.pageReLoad(2);
								
							}
							
						}
					});
				})
				// 这里仅是事件监听【如果socket关闭了会执行】
				this.socketTask.onClose((res) => {
					
					if(this.is_open_socket==true){
						clearTimeout(this.interval);
						this.interval = null;
						this.reconnect();
						return;
					}
					
					this.toIndex();
					console.log("已经被关闭了")
					
				})
			
			},
			// 关闭websocket【离开这个页面的时候执行关闭】
			closeSocket() {
				let that = this;
				this.socketTask.close({
					success(res) {
						
						clearTimeout(that.interval);
						that.interval = null;
						that.toPageClose=false;
						// console.log(that.toPageClose)
						console.log("关闭成功", res)
					},
					fail(err) {
						console.log("关闭失败", err)
					}
				})
			},
			// reset和start方法主要用来控制心跳的定时。
			reset(){
				// 清除定时器重新发送一个心跳信息
				clearTimeout(this.timeoutRestartObj);
		　　　　 this.start();
			},
			start(){
				this.timeoutRestartObj = setTimeout(() => {
					//这里发送一个心跳，后端收到后，返回一个心跳消息，
					//onmessage拿到返回的心跳就说明连接正常
					let query = {
						contentText:"Hi"
					}
					this.socketTask.send({
						data: JSON.stringify(query),
						async success() {
							console.log("消息发送成功");
						},
					});
				}, this.timeout)
			},
			// 重连
			reconnect() {
				// 防止多个方法调用，多处重连
				if (this.lockReconnect) {
					return;
				};
				
				if (this.toPageClose == false) {
					return;
				};
				
				//重连3次后回到首页
				if(this.socketNum==3){
					this.toIndex();
					return;
				}
				this.lockReconnect = true;
				
				console.log('准备重连');
				
				this.socketNum = ++this.socketNum;
				//没连接上会一直重连，设置延迟避免请求过多
				this.reconnectTimeOutObj = setTimeout(()=>{
					// 重新连接
					this.connectSocketInit();
					this.lockReconnect = false;
				}, 4000);
			},
			//发送信息
			clickRequest() {
				if (this.is_open_socket) {
					
					let token = this.$store.state.m_user.token;
					// websocket的服务器的原理是:发送一次消息,同时返回一组数据【否则服务器会进去死循环崩溃】
					let query = {
						sendType: 1,
						contentText:this.msg,
						token
					}
					
					console.log(query);
					let that = this;
					this.socketTask.send({
						data: JSON.stringify(query),
						async success() {
							console.log("消息发送成功");
							that.msg = '';
							
						},
					});
				}
			},
			setScroll(id){
				this.scrollInto = 's'+id;
			},
			
			//点赞动画 start
			thumbsUp() {
				const image = "../../static/love.png";
				const anmationData = {
					id: new Date().getTime(),
					timer: 0,
					opacity: 0.5,
					pathData: this.generatePathData(),
					image: image,
					factor: {
						speed: 0.004,
						t: 0
					}
				};
				if (Object.keys(this.thumbsUpQueue).length > 0) {
					this.thumbsUpQueue[anmationData.id] = anmationData;
				} else {
					this.thumbsUpQueue[anmationData.id] = anmationData;
					this.createThumbsAnimate();
				}
			},
			getRandom(min, max) {
				return Math.random() * (max - min) + min;
			},
			getRandomInt(min, max) {
				return Math.floor(Math.random() * (max - min + 1)) + min;
			},
			generatePathData() {
				let width = this.thumbsUpWidth,
					height = this.thumbsUpHeight;
				const p0 = {
					x: 0.65 * width,
					y: height
				};
				const p1 = {
					x: this.getRandom(0.22 * width, 0.33 * width),
					y: this.getRandom(0.5 * height, 0.75 * height)
				};
				const p2 = {
					x: this.getRandom(0, 0.88 * width),
					y: this.getRandom(0.25 * height, 0.5 * height)
				};
				const p3 = {
					x: this.getRandom(0, 0.88 * width),
					y: this.getRandom(0, 0.125 * height)
				};
				return [p0, p1, p2, p3];
			},
			updatePoint(data, factor) {
				const p0 = data[0];
				const p1 = data[1];
				const p2 = data[2];
				const p3 = data[3];
				const t = factor.t;
				const cx1 = 3 * (p1.x - p0.x);
				const bx1 = 3 * (p2.x - p1.x) - cx1;
				const ax1 = p3.x - p0.x - cx1 - bx1;
				const cy1 = 3 * (p1.y - p0.y);
				const by1 = 3 * (p2.y - p1.y) - cy1;
				const ay1 = p3.y - p0.y - cy1 - by1;
				const x = ax1 * (t * t * t) + bx1 * (t * t) + cx1 * t + p0.x;
				const y = ay1 * (t * t * t) + by1 * (t * t) + cy1 * t + p0.y;
				return {
					x,
					y
				};
			},
			createThumbsAnimate() {
				let width = this.thumbsUpWidth,
					height = this.thumbsUpHeight;
				var that = this;
				Object.keys(that.thumbsUpQueue).forEach(key => {
					const anmationData = that.thumbsUpQueue[+key];
					const {
						x,
						y
					} = this.updatePoint(
						anmationData.pathData,
						anmationData.factor
					);
					const speed = anmationData.factor.speed;
					anmationData.factor.t += speed;
					var curWidth = 40;
					curWidth = (height - y) / 1.5;
					curWidth = Math.min(40, curWidth);
					var curAlpha = anmationData.opacity;
					curAlpha = y / height;
					curAlpha = Math.min(1, curAlpha);
					that.thumbsUpContext.globalAlpha = curAlpha;
					that.thumbsUpContext.drawImage(anmationData.image, x - curWidth / 2, y, curWidth, curWidth);
					if (anmationData.factor.t > 1) {
						delete that.thumbsUpQueue[anmationData.id];
					}
					if (y > height) {
						delete that.thumbsUpQueue[anmationData.id];
					}
				});
				that.thumbsUpContext.draw();
				if (Object.keys(that.thumbsUpQueue).length > 0) {
					that.thumbsUpTimer = setTimeout(() => {
						that.createThumbsAnimate();
					}, 5);
				} else {
					clearTimeout(that.thumbsUpTimer);
					that.thumbsUpContext.draw();
				}
			},
			//点赞动画 end
			
			running() {
				this.animation.translateX(10).step({duration:1000})
				// 调用实例的方法来描述动画,translateX定义动画类型为x轴偏移, 500为偏移长度, 单位px
				// 调用 step() 来表示一组动画完成(当前参数动画时间1s)
				// step 可以配置参数用于指定当前组动画的配置。具体参数请看文档
				this.animationData = this.animation.export()
				// export方法导出动画数据
			},
			 // 播放
			play() {
				this.video=uni.createVideoContext('myVideo', this);
				this.video.play()
				this.isPlay = true
			},
			// 暂停
			pause() {
				this.video=uni.createVideoContext('myVideo', this);
				this.video.pause()
				this.isPlay = false
			},
			// 点击视频事件
			handleClicked() {
				if(timer){
					clearTimeout(timer)
				}
				this.clickNum++
				timer = setTimeout(() => {
					if(this.clickNum >= 2){
						console.log('双击视频')
					}else{
						console.log('单击视频')
						if(this.isPlay){
							this.pause()
						}else{
							this.play()
						}
					}
					this.clickNum = 0
				}, 300)
			},
			videoErrorCallback(e){
				console.log(e);
			},
			toIndex(){
				uni.navigateBack({
					delta: 1
				});
			},
			toGoodsInfo(id){
				let that = this;
				uni.navigateTo({
					url: '/pages/shop/goods?id='+id+'&type=1&isLive='+this.isLive+'&liveRoomId='+this.liveRoomId+'&anchorId='+this.anchorId,
					success:function(){
						that.closeSocket();
						clearTimeout(that.interval);
						that.interval = null;  
					}
				})
			},
			async pageReLoad(type) {
				
				this.pause();
				
				// 询问用户是否退出登录
				const [err, succ] = await uni.showModal({
					title: type == 1 ? '主播下播了' : '主播开播了',
					content: '请刷新页面？',
					showCancel: false
				}).catch(err => err)
				
				if (err || !succ || !succ.confirm) return;
				
				this.getData();
				
				this.play();
			}
		}
	}
</script>

<style lang="scss">
	.nav-fixed {
		position: fixed;
		width: 100%;
		z-index: 1000;
	}
	.goods-animation {
		-webkit-animation-name: fadeIn; /*动画名称*/
		-webkit-animation-duration: 0.5s; /*动画持续时间*/
		-webkit-animation-iteration-count: 1; /*动画次数*/
		-webkit-animation-delay: 0s; /*延迟时间*/
	}
	.goods-animation-out {
		-webkit-animation-name: fadeOut; /*动画名称*/
		-webkit-animation-duration: 0.5s; /*动画持续时间*/
		-webkit-animation-iteration-count: 1; /*动画次数*/
		-webkit-animation-delay: 0s; /*延迟时间*/
		 opacity: 0;
	}
	
	@-webkit-keyframes fadeIn {
		0% {
			opacity: 0; /*初始状态 透明度为0*/
		}
		50% {
			opacity: 0; /*中间状态 透明度为0*/
		}
		100% {
			opacity: 1; /*结尾状态 透明度为1*/
		}
	}
	
	@-webkit-keyframes fadeOut {
		0% {
			opacity: 1; /*初始状态 透明度为0*/
		}
		50% {
			opacity: 0; /*中间状态 透明度为0*/
		}
		100% {
			opacity: 0; /*结尾状态 透明度为1*/
		}
	}
	.isfixed {
		background: #FF2222;
	}
	.goods-list{
		max-height: 700rpx;
		.goods-info{
			flex-direction: row;
			padding: 40rpx 0;
			border-bottom:1px #DDDDDD solid;
			.goods-img{
				width: 80rpx;
				height: 80rpx;
				image{
					width: 80rpx;
					height: 80rpx;
				}
			}
			.goods-title{
				margin-left: 2%;
				width: 584rpx;
				display:block;
				.goods-text{
					font-size: 30rpx;
					display:blo;
					font-weight: 400;
					word-break: break-all;
					margin-bottom: 12rpx;
				}
				.goods-bottom{
					justify-content: space-between;
					flex-direction:unset;
					.goods-price{
						font-size: 15px;
						color: #FF2222;
						font-weight: bold;
						display: -webkit-box;
					}
					.goods-cart{
						display: inline-block;
						width: 43rpx;
						height: 34rpx;
						image{
							width: 36rpx;
							height: 34rpx;
						}
					}
				}
			}
		}
	}
	
	.content {
		.love-button{
			background: none;
			width: 80rpx;
			height: 80rpx;
			image{
				width: 80rpx;
				height: 40rpx;
			}
		}
		.swiper-item {
			.vd-cover{
				display: flex;
				position: absolute;
				top: 500rpx;
				left: 305rpx;
				text-align: center;
				height: 140rpx;
				width: 140rpx;
				image{
					height: 140rpx;
					width: 140rpx;
				}
			}
			.swiper-item-author{
				background: rgba($color: #000000, $alpha: 0.6);
				border-radius: 40px;
				color: #FFFFFF;
				position: absolute;
				top: 30rpx;
				left: 30rpx;
				padding:5px 15px 5px 8px;
				z-index:99;
				display: flex;
				image{
					width: 24px;
					height: 24px;
					border-radius: 50%;
					position:absolute;
					top:14rpx;
				}
				text{
					padding-left: 30px;
				}
			}
			.animation{
				width: 64%;
				height: 55px;
				bottom: 63px;
				position: absolute;
				overflow: hidden;
			}
			.cart{
				width: 95%;
				padding: 2%;
				margin-left: 3%;
				display: flex;
				flex-direction: row;
				border-radius: 5px;
				background-color: #fff;
				.cart-img{
					width: 40px;
					height: 40px;
				}
				.cart-title{
					margin-left: 5px;
					font-size: 15px;
					width: 80%;
					
					.cart-goods{
						color: #000;
						overflow: hidden;
						text-overflow: ellipsis;
						white-space: nowrap;
						width: 100%;
						display: inline-block;
					}
					.cart-price{
						color: #FF2222;
					}
				}
				.cart-icon{
					position: absolute;
					bottom: 5px;
					right: 7px;
					width: 17px;
					height: 17px;
				}
			}
			.info {
				z-index: 1;
				position: absolute;
				position: fixed;
				display: flex;
				flex-direction: row;
				// bottom: 13px;
				bottom: 45px;
				font-size: 30upx;
				padding: 0 3%;
				width: 100%;
				.info-gift{
					image{
						height: 40px;
						width: 35px;
					}
				}
				
				.info-share{
					width: 90rpx;
					margin-right: 2%;
					.share{
						height: 40px;
						width: 40px;
						z-index:1;
					}
					button{
						position: absolute;
						width: 83rpx;
						height: 82rpx;
						background:none;
						z-index:99999;
					}
					button::after{ border: none; }
				}
				.info-love{
					width: 90rpx;
					position: relative;
					text{
						position: absolute;
						color: #FF0054;
						background-color: #fff;
						font-size: 12px;
						border-radius: 10px;
						padding: 5px 10px;
						bottom: 46px;
						right: 7rpx;
					}
					image{
						height: 40px;
						width: 40px;
					}
					button{
						position: absolute;
						width: 90rpx;
						height: 94rpx;
						background:none;
						z-index:99999;
					}
					button::after{ border: none; }
					.love-content{
						position: absolute;
						bottom: 85rpx;
						right: 0;
					}
				}
				.info-chat{
					background: rgba($color: #000000, $alpha: 0.4);
					border-radius: 40px;
					margin:0 3%;
					padding: 0 5%;
					width: 60%;
				}
				input{
					color: #FFFFFF;
					height: 40px;
					line-height: 40px;
				}
				.btn-send {
					display: inline-block;
					width: 170rpx;
					height: 80rpx;
					line-height: 80rpx;
					background: #ff0054;
					color: #ffffff;
					border-radius: 40rpx;
					text-align: center;
				}
			}
	
			.comment-list{
				height: 150px;
				position: absolute;
				bottom: 90px;
				left: 15px;
				display: flex;
				max-width: 70%;
				flex-direction: row;
				view{
					display: inline;
				}
				overflow:hidden;
				.comment-content{
					.comment-text{
						display: inline-block;
						margin-top: 5px;
						background: rgba($color: #000000, $alpha: 0.4);
						color: #FFFFFF;
						border-radius: 20px;
						font-size: 12px;
						padding: 3px 12px;
						// 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。
						display: -webkit-box;
						// 设置或检索伸缩盒对象的子元素的排列方式 。
						-webkit-box-orient:vertical;
						// 用省略号“…”隐藏超出范围的文本 。
						text-overflow: ellipsis;
						
						text{
							color: #B5DDFF;
						}
					}
				}
			}
			.video {
				width: 100%;
				z-index: 0;
				height: calc(100vh - 120rpx);
				pointer-events: auto;
			}
	
			.buttons {
				display: flex;
				flex-direction: column;
				position: absolute;
				right: 5vw;
				bottom: 12vh;
				color: white;
				text-align: center;
				justify-content: center;
				z-index: 1;
				.header_group{
					margin-bottom: 50upx;
					height: 90upx;
					width: 90upx;
					position: relative;
					.header{
						border: 2px solid white;
						margin: 0 auto;
						border-radius:90upx;
						height: 90upx;
						width: 90upx;
					}
					.add{
						position: absolute;
						bottom: -30upx;
						margin: 0 auto;
						right: 0upx;
						background-color: #f15b6c;
						left: 0upx;
						width: 50upx;
						height: 50upx;
						font-size: 50upx;
						line-height: 50upx;
						border-radius:50upx;
					}
				}
				
				.button {
					text-align: center;
					font-size: 25upx;
	
					.icon {
						margin: 20upx;
						width: 60upx;
					}
				}
			}
		}
	}
	
</style>
